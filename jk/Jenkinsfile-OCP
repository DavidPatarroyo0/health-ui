pipeline {
  agent any
  stages {
    stage ('Start') {
      steps {
        // send build started notifications
        //slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        echo "Start Pipeline"
      }
    }
    stage('Code Analysis') {
      environment {
       scannerHome = tool 'sonarscanner'
      }
      when {
        expression { "$scan_code" == "true" }
      }
      steps {
        withSonarQubeEnv('sonar') {
         sh '${scannerHome}/bin/sonar-scanner -X -Dsonar.projectKey=health-ui -Dsonar.sources=. -Dsonar.java.binaries=. -DskipTests=true'
        }
      }
    }


    stage("Build UI Service") {
      agent any
      steps {
        sh """
        #!/bin/bash
        FQDN=\$(oc get route \${API_Name} | grep \${API_Name} | awk '{print \$2}\')
        API_URL=\$(echo '"http://\${FQDN}"')
        sed -e "s/var CURRENTMODE.*\$/var CURRENTMODE = MODE.OPENSHIFT;/" -i site/app.js
        sed  "s|var API_URL.*\$|var API_URL=\${API_URL}|" -i site/app.js
        BUILDEXISTS=\$(oc get bc | grep \${UI_Name} | awk '{print \$1}\')
        if [ -z "\${BUILDEXISTS}" ]
        then
          oc new-build --strategy docker --binary --name  ${UI_Name}
          oc start-build ${UI_Name} --from-dir . --follow
        else
            oc start-build ${UI_Name} --from-dir . --follow
        fi
        """
      }
    }

    stage("Deploy UI") {
      agent any
      steps {
        echo "Deploying UI Service"
        sh """
        #!/bin/bash
        UIDEPLOYED=\$(oc get dc | grep \${UI_Name} | awk '{print \$1}\')
        if [ -z "\${UIDEPLOYED}" ]
        then
          oc new-app ${UI_Name}
          oc expose svc/${UI_Name}
        fi
        """
      }
    }

  }
  environment {
    DB_Name    = 'health-db'
    API_Name   = 'health-api'
    UI_Name    = 'health-ui'
    ADMIN_Name = 'health-admin'
    scan_code  = 'false'


  }
}
